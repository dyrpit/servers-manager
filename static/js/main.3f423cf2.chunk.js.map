{"version":3,"sources":["components/Header/Header.js","service/request.js","service/ServersService.js","actions/apiActions.js","reducer/apiReducer.js","context/Store.js","components/Container/Container.js","components/ServersCountDisplay/ServersCountDisplay.js","components/SearchInput/SerachInput.js","components/TableHeader/TableHeader.js","components/StatusField/StatusField.js","components/Tooltip/Tooltip.js","components/TableRow/TableRow.js","components/Table/Table.js","pages/ServersPage/ServersPage.js","App.js","index.js"],"names":["Header","className","axios","create","baseURL","headers","ServersService","getAllServers","request","get","getServer","id","turnServerOn","patch","turnServerOff","rebootServer","API_ACTIONS","getServersError","e","type","payload","turnOffServer","server","turnOnServer","apiReducer","state","action","pending","servers","error","map","ApiContext","createContext","initialState","Store","children","useReducer","dispatch","Provider","value","Container","ServersCountDisplay","serversCount","propTyeps","PropTypes","number","SearchInput","searchValue","setSearchValue","activeButton","onClick","placeholder","onChange","target","toLowerCase","TableHeader","StatusField","status","statusField","ONLINE","OFFLINE","REBOOTING","Tooltip","isOpen","handleToggleTooltip","handleTurnOn","handleTurnOff","handleReboot","openClass","disabledClass","buttons","TableRow","useState","setIsOpen","useContext","stopPropagation","prev","a","res","data","message","intervalId","setInterval","clearInterval","name","Table","key","ServersPage","filteredServers","setFilteredServers","useEffect","fetchData","filtered","filter","includes","style","margin","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f423cf2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<header className='header'>\r\n\t\t\t<div className='logo'>\r\n\t\t\t\t<div className='logo__sign'></div>\r\n\t\t\t\t<div className='logo__title'>Servers Manager</div>\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\n// const BASE_URL = 'http://localhost:4454';\r\nconst BASE_URL = 'https://dyrpit-servers-api.herokuapp.com';\r\n\r\nexport default axios.create({\r\n\tbaseURL: BASE_URL,\r\n\theaders: {\r\n\t\t'Content-Type': 'application/json',\r\n\t},\r\n});\r\n","import request from './request';\r\n\r\nconst getAllServers = () => request.get('/servers');\r\n\r\nconst getServer = (id) => request.get(`/servers/${id}`);\r\n\r\nconst turnServerOn = (id) => request.patch(`/servers/${id}/on`);\r\n\r\nconst turnServerOff = (id) => request.patch(`/servers/${id}/off`);\r\n\r\nconst rebootServer = (id) => request.patch(`/servers/${id}/reboot`);\r\n\r\nconst ServersService = {\r\n\tgetAllServers,\r\n\tgetServer,\r\n\tturnServerOn,\r\n\tturnServerOff,\r\n\trebootServer,\r\n};\r\n\r\nexport default ServersService;\r\n","export const API_ACTIONS = {\r\n\tGET_SERVERS_PENDING: 'GET_SERVERS_PENDING',\r\n\tGET_SERVERS_SUCCESS: 'GET_SERVERS_SUCCESS',\r\n\tGET_SERVERS_ERROR: 'GET_SERVERS_ERROR',\r\n\tGET_SERVER: 'GET_SERVER',\r\n\tTURN_OFF_SERVER: 'TURN_OFF_SERVER',\r\n\tTURN_ON_SERVER: 'TURN_ON_SERVER',\r\n\tREBOOT_SERVER: 'REBOOT_SERVER',\r\n};\r\n\r\nexport const getServersPending = () => ({ type: API_ACTIONS.GET_SERVERS_PENDING });\r\nexport const getServersSuccess = (servers) => ({\r\n\ttype: API_ACTIONS.GET_SERVERS_SUCCESS,\r\n\tpayload: servers,\r\n});\r\nexport const getServersError = (e) => ({ type: API_ACTIONS.GET_SERVERS_ERROR, payload: e });\r\nexport const turnOffServer = (server) => ({\r\n\ttype: API_ACTIONS.TURN_OFF_SERVER,\r\n\tpayload: server,\r\n});\r\nexport const turnOnServer = (server) => ({\r\n\ttype: API_ACTIONS.TURN_ON_SERVER,\r\n\tpayload: server,\r\n});\r\nexport const rebootServer = (server) => ({\r\n\ttype: API_ACTIONS.REBOOT_SERVER,\r\n\tpayload: server,\r\n});\r\n\r\nexport const getServer = (server) => ({ type: API_ACTIONS.GET_SERVER, payload: server });\r\n","import { API_ACTIONS } from '../actions/apiActions';\r\n\r\nexport const apiReducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase API_ACTIONS.GET_SERVERS_PENDING:\r\n\t\t\treturn { ...state, pending: true };\r\n\t\tcase API_ACTIONS.GET_SERVERS_SUCCESS:\r\n\t\t\treturn { ...state, pending: false, servers: action.payload };\r\n\t\tcase API_ACTIONS.GET_SERVERS_ERROR:\r\n\t\t\treturn { ...state, pending: false, error: action.payload };\r\n\t\tcase API_ACTIONS.GET_SERVER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tservers: state.servers.map((server) =>\r\n\t\t\t\t\tserver.id === action.payload.id ? action.payload : server\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\tcase API_ACTIONS.TURN_OFF_SERVER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tservers: state.servers.map((server) =>\r\n\t\t\t\t\tserver.id === action.payload.id ? action.payload : server\r\n\t\t\t\t),\r\n\t\t\t};\r\n\r\n\t\tcase API_ACTIONS.TURN_ON_SERVER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tservers: state.servers.map((server) =>\r\n\t\t\t\t\tserver.id === action.payload.id ? action.payload : server\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\tcase API_ACTIONS.REBOOT_SERVER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tservers: state.servers.map((server) =>\r\n\t\t\t\t\tserver.id === action.payload.id ? action.payload : server\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React, { createContext, useReducer } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { apiReducer } from '../reducer/apiReducer';\r\n\r\nexport const ApiContext = createContext();\r\n\r\nconst initialState = {\r\n\tservers: [],\r\n\tpending: false,\r\n\terror: null,\r\n};\r\n\r\nconst Store = ({ children }) => {\r\n\tconst [state, dispatch] = useReducer(apiReducer, initialState);\r\n\r\n\treturn <ApiContext.Provider value={{ state, dispatch }}>{children}</ApiContext.Provider>;\r\n};\r\n\r\nexport default Store;\r\n\r\nStore.propTypes = {\r\n\tchildren: PropTypes.oneOfType([PropTypes.object, PropTypes.element, PropTypes.array]),\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Container.scss';\r\n\r\nconst Container = ({ children }) => {\r\n\treturn <main className='container'>{children}</main>;\r\n};\r\n\r\nexport default Container;\r\n\r\nContainer.propTypes = {\r\n\tchildren: PropTypes.oneOfType([PropTypes.object, PropTypes.element, PropTypes.array]),\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ServersCountDisplay.scss';\r\n\r\nconst ServersCountDisplay = ({ serversCount }) => {\r\n\treturn (\r\n\t\t<div className='servers-count'>\r\n\t\t\t<p className='servers-count__title'>Servers</p>\r\n\t\t\t<p className='servers-count__text'>Number of elements: {serversCount}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ServersCountDisplay;\r\n\r\nServersCountDisplay.propTyeps = {\r\n\tserversCount: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './SearchInput.scss';\r\n\r\nconst SearchInput = ({ searchValue, setSearchValue }) => {\r\n\tconst handleOnChange = (e) => {\r\n\t\tconst { value } = e.target;\r\n\r\n\t\tsetSearchValue(value.toLowerCase());\r\n\t};\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetSearchValue('');\r\n\t};\r\n\r\n\tconst activeButton = searchValue ? (\r\n\t\t<button onClick={handleReset} className='search__button'>\r\n\t\t\t<i className='fas fa-times'></i>\r\n\t\t</button>\r\n\t) : (\r\n\t\t<button className='search__button'>\r\n\t\t\t<i className='fas fa-search'></i>\r\n\t\t</button>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className='search'>\r\n\t\t\t<div className='search-field'>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='search__input'\r\n\t\t\t\t\tplaceholder='Search'\r\n\t\t\t\t\tvalue={searchValue}\r\n\t\t\t\t\tonChange={handleOnChange}\r\n\t\t\t\t></input>\r\n\t\t\t\t{activeButton}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchInput;\r\n\r\nSearchInput.propTypes = {\r\n\tsearchValue: PropTypes.string,\r\n\tsetSearchValue: PropTypes.func,\r\n};\r\n","import React from 'react';\r\n\r\nconst TableHeader = () => {\r\n\treturn (\r\n\t\t<div className='table__header'>\r\n\t\t\t<p className='table__header__name'>name</p>\r\n\t\t\t<p className='table__header__status'>status</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TableHeader;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StatusField = ({ status }) => {\r\n\tconst statusField = {\r\n\t\tONLINE: (\r\n\t\t\t<div className='table__row__status table__row__status online'>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<i className='fas fa-circle icon-online'></i>\r\n\t\t\t\t\t{status}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t),\r\n\t\tOFFLINE: (\r\n\t\t\t<div className='table__row__status'>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<i className='fas fa-times offline icon-offline'></i>\r\n\t\t\t\t\t{status}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t),\r\n\t\tREBOOTING: (\r\n\t\t\t<div className='table__row__status reboot'>\r\n\t\t\t\t<p>{status}...</p>\r\n\t\t\t</div>\r\n\t\t),\r\n\t};\r\n\r\n\treturn !status ? null : <>{statusField[status]}</>;\r\n};\r\n\r\nexport default StatusField;\r\n\r\nStatusField.propTypes = {\r\n\tstatus: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Tooltip.scss';\r\n\r\nconst Tooltip = ({\r\n\tisOpen,\r\n\thandleToggleTooltip,\r\n\tstatus,\r\n\thandleTurnOn,\r\n\thandleTurnOff,\r\n\thandleReboot,\r\n}) => {\r\n\tconst openClass = isOpen ? 'tooltip__controls--open' : '';\r\n\r\n\tconst disabledClass = status === 'REBOOTING' ? 'tooltip--disabled' : '';\r\n\r\n\tconst buttons =\r\n\t\tstatus === 'ONLINE' ? (\r\n\t\t\t<>\r\n\t\t\t\t<div className='tooltip__controls__button' onClick={handleTurnOff}>\r\n\t\t\t\t\tTurn off\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='tooltip__controls__button' onClick={handleReboot}>\r\n\t\t\t\t\tReboot\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t) : (\r\n\t\t\t<div className='tooltip__controls__button' onClick={handleTurnOn}>\r\n\t\t\t\tTurn on\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`tooltip ${disabledClass}`}\r\n\t\t\tonClick={(e) => {\r\n\t\t\t\tif (status === 'REBOOTING') {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\thandleToggleTooltip(e);\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div className='tooltip__dot'></div>\r\n\t\t\t<div className='tooltip__dot'></div>\r\n\t\t\t<div className='tooltip__dot'></div>\r\n\t\t\t<div className={`tooltip__controls ${openClass}`}>{buttons}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Tooltip;\r\n\r\nTooltip.propTypes = {\r\n\tisOpen: PropTypes.bool,\r\n\thandleToggleTooltip: PropTypes.func,\r\n\tstatus: PropTypes.string,\r\n\thandleTurnOn: PropTypes.func,\r\n\thandleTurnOff: PropTypes.func,\r\n\thandleReboot: PropTypes.func,\r\n};\r\n","import React, { useContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport StatusField from '../StatusField/StatusField';\r\nimport Tooltip from '../Tooltip/Tooltip';\r\n\r\nimport ServersService from '../../service/ServersService';\r\nimport {\r\n\tgetServer,\r\n\tgetServersError,\r\n\trebootServer,\r\n\tturnOffServer,\r\n\tturnOnServer,\r\n} from '../../actions/apiActions';\r\nimport { ApiContext } from '../../context/Store';\r\n\r\nconst TableRow = ({ server }) => {\r\n\tconst [isOpen, setIsOpen] = useState(false);\r\n\r\n\tconst { dispatch } = useContext(ApiContext);\r\n\r\n\tconst handleToggleTooltip = (e) => {\r\n\t\te.stopPropagation();\r\n\r\n\t\tsetIsOpen((prev) => !prev);\r\n\t};\r\n\r\n\tconst handleTurnOn = async () => {\r\n\t\ttry {\r\n\t\t\tconst res = await ServersService.turnServerOn(server.id);\r\n\t\t\tdispatch(turnOnServer(res.data));\r\n\t\t} catch (e) {\r\n\t\t\tdispatch(getServersError(e.message));\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleTurnOff = async () => {\r\n\t\ttry {\r\n\t\t\tconst res = await ServersService.turnServerOff(server.id);\r\n\t\t\tdispatch(turnOffServer(res.data));\r\n\t\t} catch (e) {\r\n\t\t\tdispatch(getServersError(e.message));\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleReboot = async () => {\r\n\t\tlet intervalId;\r\n\t\ttry {\r\n\t\t\tconst res = await ServersService.rebootServer(server.id);\r\n\r\n\t\t\tdispatch(rebootServer(res.data));\r\n\r\n\t\t\tif (res.data.status === 'REBOOTING') {\r\n\t\t\t\tintervalId = setInterval(async () => {\r\n\t\t\t\t\tconst res = await ServersService.getServer(server.id);\r\n\t\t\t\t\tif (res.data.status === 'ONLINE') {\r\n\t\t\t\t\t\tdispatch(getServer(res.data));\r\n\t\t\t\t\t\tclearInterval(intervalId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 1000);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tdispatch(getServersError(e.message));\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<li className='table__row' onClick={(e) => isOpen && handleToggleTooltip(e)}>\r\n\t\t\t<p className='table__row__name'>{server.name}</p>\r\n\t\t\t<StatusField status={server.status} />\r\n\t\t\t<Tooltip\r\n\t\t\t\tisOpen={isOpen}\r\n\t\t\t\thandleToggleTooltip={handleToggleTooltip}\r\n\t\t\t\tstatus={server.status}\r\n\t\t\t\thandleTurnOn={handleTurnOn}\r\n\t\t\t\thandleTurnOff={handleTurnOff}\r\n\t\t\t\thandleReboot={handleReboot}\r\n\t\t\t/>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default TableRow;\r\n\r\nTableRow.propTypes = {\r\n\tserver: PropTypes.shape({\r\n\t\tid: PropTypes.number,\r\n\t\tname: PropTypes.string,\r\n\t\tstatus: PropTypes.string,\r\n\t}),\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Table.scss';\r\nimport TableHeader from '../TableHeader/TableHeader';\r\nimport TableRow from '../TableRow/TableRow';\r\n\r\nconst Table = ({ servers }) => {\r\n\treturn (\r\n\t\t<div className='table'>\r\n\t\t\t<TableHeader />\r\n\t\t\t<ul className='table__list'>\r\n\t\t\t\t{servers.map((server) => (\r\n\t\t\t\t\t<TableRow key={server.id} server={server} />\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Table;\r\n\r\nTable.propTypes = {\r\n\tservers: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n","import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport ServersService from '../../service/ServersService';\r\nimport { getServersError, getServersPending, getServersSuccess } from '../../actions/apiActions';\r\nimport { ApiContext } from '../../context/Store';\r\n\r\nimport Container from '../../components/Container/Container';\r\nimport ServersCountDisplay from '../../components/ServersCountDisplay/ServersCountDisplay';\r\nimport SearchInput from '../../components/SearchInput/SerachInput';\r\nimport Table from '../../components/Table/Table';\r\n\r\nconst ServersPage = () => {\r\n\tconst { state, dispatch } = useContext(ApiContext);\r\n\r\n\tconst [searchValue, setSearchValue] = useState('');\r\n\tconst [filteredServers, setFilteredServers] = useState(state.servers);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tdispatch(getServersPending());\r\n\t\t\ttry {\r\n\t\t\t\tconst res = await ServersService.getAllServers();\r\n\t\t\t\tdispatch(getServersSuccess(res.data));\r\n\t\t\t\tsetFilteredServers(res.data);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tdispatch(getServersError(e.message));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t}, [dispatch]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst filtered = state.servers.filter((server) => {\r\n\t\t\tif (['online', 'offline', 'rebooting'].includes(searchValue)) {\r\n\t\t\t\treturn server.status.toLowerCase().includes(searchValue);\r\n\t\t\t}\r\n\t\t\treturn server.name.toLowerCase().includes(searchValue);\r\n\t\t});\r\n\r\n\t\tsetFilteredServers(filtered);\r\n\t}, [searchValue, state.servers]);\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t{state.pending ? (\r\n\t\t\t\t<p style={{ margin: '0 auto' }}>Loading...</p>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<ServersCountDisplay serversCount={filteredServers.length} />\r\n\t\t\t\t\t<SearchInput searchValue={searchValue} setSearchValue={setSearchValue} />\r\n\t\t\t\t\t<Table servers={filteredServers} />\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default ServersPage;\r\n","import React from 'react';\n\nimport Header from './components/Header/Header';\nimport ServersPage from './pages/ServersPage/ServersPage';\nimport Store from './context/Store';\n\nconst App = () => {\n\treturn (\n\t\t<Store>\n\t\t\t<Header />\n\t\t\t<ServersPage />\n\t\t</Store>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}